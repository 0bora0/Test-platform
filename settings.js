import { initializeApp } from "https://www.gstatic.com/firebasejs/9.16.0/firebase-app.js";
import { getFirestore, collection, addDoc, getDocs, doc, getDoc,query,where } from "https://www.gstatic.com/firebasejs/9.16.0/firebase-firestore.js";

const firebaseConfig = {
    apiKey: "AIzaSyCR-nsO0Eibf9Fmba6zp0IeyNTiZ1YTNHQ",
    authDomain: "testcenter-2025.firebaseapp.com",
    projectId: "testcenter-2025",
    storageBucket: "testcenter-2025.firebasestorage.app",
    messagingSenderId: "446759343746",
    appId: "1:446759343746:web:9025b482329802cc34069b",
    measurementId: "G-0K3X6WSL09"
  };
const app = initializeApp(firebaseConfig);
const db = getFirestore(app);

// –§–æ—Ä–º–∞ –∑–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞ —Ç–µ—Å—Ç–∞
const userSelect = document.getElementById("userSelect");
const addUserButton = document.getElementById("addUser");
const allowedUsersList = document.getElementById("allowedUsersList");
const questionSelect = document.getElementById("questionSelect");
const addQuestionButton = document.getElementById("addQuestion");
const selectedQuestionsList = document.getElementById("selectedQuestionsList");

document.addEventListener("DOMContentLoaded", () => {
    const disciplineSelect = document.getElementById("course"); 
    const userSelect = document.getElementById("userSelect");

    if (!disciplineSelect || !userSelect) {
        console.error("‚ùå –ì—Ä–µ—à–∫–∞: –ï–ª–µ–º–µ–Ω—Ç–∏—Ç–µ –Ω–µ —Å–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏ –≤ DOM!");
        return;
    }

    disciplineSelect.addEventListener("change", loadUsers);
});

async function loadUsers() {
    const disciplineSelect = document.getElementById("course");
    const userSelect = document.getElementById("userSelect");

    if (!disciplineSelect || !userSelect) {
        console.error("‚ùå –ì—Ä–µ—à–∫–∞: –ï–ª–µ–º–µ–Ω—Ç–∏—Ç–µ –Ω–µ —Å–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏!");
        return;
    }

    const selectedDiscipline = disciplineSelect.value.trim();

    if (!selectedDiscipline) {
        userSelect.innerHTML = '<option value="">–ú–æ–ª—è, –∏–∑–±–µ—Ä–µ—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞...</option>';
        return;
    }

    try {
        userSelect.innerHTML = '<option value="">–ó–∞—Ä–µ–∂–¥–∞–º –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏—Ç–µ...</option>';

        // üîπ –¢—ä—Ä—Å–∏–º –∫—É—Ä—Å–∞ –≤ `courses`, –∫–æ–π—Ç–æ —Å—ä–¥—ä—Ä–∂–∞ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞—Ç–∞
        const coursesCollection = collection(db, "courses");
        const courseQuery = query(coursesCollection, where("disciplineName", "==", selectedDiscipline));
        const courseSnapshot = await getDocs(courseQuery);

        if (courseSnapshot.empty) {
            userSelect.innerHTML = '<option disabled>–ù—è–º–∞ –∑–∞–ø–∏—Å–∞–Ω–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏ –∑–∞ —Ç–∞–∑–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞</option>';
            return;
        }

        let userEmails = new Set(); // –°—ä–±–∏—Ä–∞ –∏–º–µ–π–ª–∏—Ç–µ –Ω–∞ —Å—Ç—É–¥–µ–Ω—Ç–∏—Ç–µ
        courseSnapshot.forEach((doc) => {
            const courseData = doc.data();
            if (courseData.students && Array.isArray(courseData.students)) {
                courseData.students.forEach(student => userEmails.add(student.email));
            }
        });

        if (userEmails.size === 0) {
            userSelect.innerHTML = '<option disabled>–ù—è–º–∞ –∑–∞–ø–∏—Å–∞–Ω–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏ –∑–∞ —Ç–∞–∑–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞</option>';
            return;
        }

        // üîπ –í–∑–∏–º–∞–º–µ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏—Ç–µ –æ—Ç `users`, –∫–æ–∏—Ç–æ –∏–º–∞—Ç —Å—ä–æ—Ç–≤–µ—Ç–Ω–∏—Ç–µ –∏–º–µ–π–ª–∏
        const usersCollection = collection(db, "users");
        const usersQuery = query(usersCollection, where("email", "in", Array.from(userEmails)));

        const usersSnapshot = await getDocs(usersQuery);
        userSelect.innerHTML = '<option value="">–ò–∑–±–µ—Ä–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª...</option>';
        let foundUsers = 0;

        usersSnapshot.forEach((doc) => {
            const userData = doc.data();
            foundUsers++;

            const option = document.createElement("option");
            option.value = JSON.stringify({ id: doc.id, ...userData });
            option.textContent = `${userData.firstName || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"} ${userData.lastName || ""} (${userData.email})`;
            userSelect.appendChild(option);
        });

        if (foundUsers === 0) {
            userSelect.innerHTML += '<option disabled>–ù—è–º–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏ –∑–∞ —Ç–∞–∑–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞</option>';
        }

        console.log(`‚úÖ –ó–∞—Ä–µ–¥–µ–Ω–∏ —Å–∞ ${foundUsers} –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏ –∑–∞ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞—Ç–∞: ${selectedDiscipline}`);
    } catch (error) {
        console.error("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏—Ç–µ:", error);
        userSelect.innerHTML = '<option disabled>–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏—Ç–µ</option>';
    }
}

// ‚úÖ –ö–æ–≥–∞—Ç–æ —Å–µ –∏–∑–±–µ—Ä–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞, –∑–∞—Ä–µ–∂–¥–∞–º–µ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏—Ç–µ
document.getElementById("course").addEventListener("change", loadUsers);

document.getElementById("addUser").addEventListener("click", () => {
    const userSelect = document.getElementById("userSelect");
    const selectedOption = userSelect.options[userSelect.selectedIndex]; // ‚úÖ –í–∑–∏–º–∞ –∏–∑–±—Ä–∞–Ω–∏—è –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª –ø—Ä–∞–≤–∏–ª–Ω–æ

    if (!selectedOption || !selectedOption.value) {
        console.error("‚ùå –ì—Ä–µ—à–∫–∞: –ù—è–º–∞ –∏–∑–±—Ä–∞–Ω –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª!");
        alert("‚ùå –ú–æ–ª—è, –∏–∑–±–µ—Ä–µ—Ç–µ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª –ø—Ä–µ–¥–∏ –¥–∞ –¥–æ–±–∞–≤–∏—Ç–µ!");
        return;
    }

    addUserToList(selectedOption);
});
function addUserToList(selectedOption) {
    if (!selectedOption || !selectedOption.value) {
        console.error("‚ùå –ì—Ä–µ—à–∫–∞: `selectedOption.value` –µ undefined –∏–ª–∏ –ø—Ä–∞–∑–Ω–æ.");
        return;
    }

    try {
        console.log("üì• –°—Ç–æ–π–Ω–æ—Å—Ç –Ω–∞ –∏–∑–±—Ä–∞–Ω–∏—è –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª:", selectedOption.value);

        const userData = JSON.parse(selectedOption.value); // üöÄ –î–µ–∫–æ–¥–∏—Ä–∞ JSON

        console.log("‚úÖ –î–µ–∫–æ–¥–∏—Ä–∞–Ω JSON:", userData);

        if (!userData.email) {
            console.error("‚ùå –ì—Ä–µ—à–∫–∞: –õ–∏–ø—Å–≤–∞ `email` –≤ –¥–∞–Ω–Ω–∏—Ç–µ!");
            return;
        }

        if ([...allowedUsersList.children].some(li => li.dataset.email === userData.email)) {
            alert("‚ö†Ô∏è –¢–æ–∑–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª –≤–µ—á–µ –µ –¥–æ–±–∞–≤–µ–Ω!");
            return;
        }

        const li = document.createElement("li");
        li.className = "list-group-item d-flex justify-content-between align-items-center";
        li.dataset.email = userData.email;
        li.textContent = `${userData.firstName || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"} ${userData.lastName || ""} (${userData.email})`;

        const removeButton = document.createElement("button");
        removeButton.className = "btn btn-danger btn-sm";
        removeButton.innerHTML = `<i class="bi bi-trash"></i>`;
        removeButton.onclick = function () { li.remove(); };

        li.appendChild(removeButton);
        allowedUsersList.appendChild(li);

        console.log("‚úÖ –ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –µ –¥–æ–±–∞–≤–µ–Ω:", userData);
    } catch (error) {
        console.error("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–≤–∞–Ω–µ –Ω–∞ JSON:", error);
        alert("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑–±–æ—Ä–∞ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª! –ü—Ä–æ–≤–µ—Ä–µ—Ç–µ –∫–æ–Ω–∑–æ–ª–∞—Ç–∞ –∑–∞ –ø–æ–≤–µ—á–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.");
    }
}

async function loadQuestionBanks() {
    const disciplineSelect = document.getElementById("course"); // üìå –°–µ–ª–µ–∫—Ü–∏—è –Ω–∞ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞
    const questionBankSelect = document.getElementById("questionBank"); // üìå –°–ø–∏—Å—ä–∫ —Å –±–∞–Ω–∫–∏ —Å –≤—ä–ø—Ä–æ—Å–∏

    if (!disciplineSelect || !questionBankSelect) {
        console.error("‚ùå –ì—Ä–µ—à–∫–∞: –õ–∏–ø—Å–≤–∞ —Å–µ–ª–µ–∫—Ç –µ–ª–µ–º–µ–Ω—Ç!");
        return;
    }

    const selectedDiscipline = disciplineSelect.value.trim();

    if (!selectedDiscipline) {
        questionBankSelect.innerHTML = '<option value="">--–ò–∑–±–µ—Ä–∏ –±–∞–Ω–∫–∞ —Å –≤—ä–ø—Ä–æ—Å–∏--</option>';
        return;
    }

    try {
        questionBankSelect.innerHTML = '<option value="">–ó–∞—Ä–µ–∂–¥–∞–º –±–∞–Ω–∫–∏ —Å –≤—ä–ø—Ä–æ—Å–∏...</option>';

        // üìå –¢—ä—Ä—Å–∏–º –≤ `courses`, –∑–∞ –¥–∞ –Ω–∞–º–µ—Ä–∏–º –±–∞–Ω–∫–∏—Ç–µ —Å –≤—ä–ø—Ä–æ—Å–∏ –∑–∞ –∏–∑–±—Ä–∞–Ω–∞—Ç–∞ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞
        const coursesCollection = collection(db, "courses");
        const courseQuery = query(coursesCollection, where("disciplineName", "==", selectedDiscipline));
        const courseSnapshot = await getDocs(courseQuery);
        if (courseSnapshot.empty) {
            questionBankSelect.innerHTML = '<option disabled>‚ùå –ù—è–º–∞ –±–∞–Ω–∫–∏ —Å –≤—ä–ø—Ä–æ—Å–∏ –∑–∞ —Ç–∞–∑–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞</option>';
            return;
        }

        let foundBanks = 0;
        questionBankSelect.innerHTML = '<option value="">--–ò–∑–±–µ—Ä–∏ –±–∞–Ω–∫–∞ —Å –≤—ä–ø—Ä–æ—Å–∏--</option>';

        courseSnapshot.forEach((doc) => {
            const courseData = doc.data();
            if (courseData.questionBanks && Array.isArray(courseData.questionBanks)) {
                courseData.questionBanks.forEach((bank, index) => {
                    foundBanks++;
                    const option = document.createElement("option");
                    option.value = bank.name; // –ú–æ–∂–µ—à –¥–∞ –∑–∞–ø–∞–∑–∏—à ID, –∞–∫–æ –∏–º–∞—à –Ω—É–∂–¥–∞
                    option.textContent = bank.name;
                    questionBankSelect.appendChild(option);
                });
            }
        });

        if (foundBanks === 0) {
            questionBankSelect.innerHTML += '<option disabled>‚ùå –ù—è–º–∞ –±–∞–Ω–∫–∏ —Å –≤—ä–ø—Ä–æ—Å–∏ –∑–∞ —Ç–∞–∑–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞</option>';
        }
    } catch (error) {
        console.error("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –±–∞–Ω–∫–∏—Ç–µ —Å –≤—ä–ø—Ä–æ—Å–∏:", error);
        questionBankSelect.innerHTML = '<option disabled>‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ</option>';
    }
}

// ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –ø—Ä–∏ –ø—Ä–æ–º—è–Ω–∞ –Ω–∞ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞—Ç–∞
document.getElementById("course").addEventListener("change", loadQuestionBanks);


// ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –ø—Ä–∏ –ø—Ä–æ–º—è–Ω–∞ –Ω–∞ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞—Ç–∞
document.getElementById("course").addEventListener("change", loadQuestionBanks);

async function loadQuestions() {
    // üìå –í–∑–∏–º–∞–º–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞—Ç–∞ –∏ –±–∞–Ω–∫–∞—Ç–∞ —Å –≤—ä–ø—Ä–æ—Å–∏ –æ—Ç —Å–µ–ª–µ–∫—Ç–∏—Ç–µ
    const disciplineSelect = document.getElementById("course");
    const questionBankSelect = document.getElementById("questionBank");
    const questionSelect = document.getElementById("questionSelect");

    // üõë –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –≤—Å–∏—á–∫–∏ –µ–ª–µ–º–µ–Ω—Ç–∏ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞—Ç
    if (!disciplineSelect || !questionBankSelect || !questionSelect) {
        console.error("‚ùå –ì—Ä–µ—à–∫–∞: –õ–∏–ø—Å–≤–∞ —Å–µ–ª–µ–∫—Ç –µ–ª–µ–º–µ–Ω—Ç! –£–≤–µ—Ä–∏ —Å–µ, —á–µ `course`, `questionBank` –∏ `questionSelect` —Å—ä—â–µ—Å—Ç–≤—É–≤–∞—Ç –≤ DOM.");
        return;
    }

    const selectedDiscipline = disciplineSelect.value.trim();
    const selectedBank = questionBankSelect.value.trim();

    // üõë –ê–∫–æ –Ω–µ —Å–∞ –∏–∑–±—Ä–∞–Ω–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –∏ –±–∞–Ω–∫–∞ ‚Üí —Å–ø–∏—Ä–∞–º–µ
    if (!selectedDiscipline || !selectedBank) {
        questionSelect.innerHTML = '<option value="">--–ò–∑–±–µ—Ä–∏ –≤—ä–ø—Ä–æ—Å--</option>';
        return;
    }

    try {
        questionSelect.innerHTML = '<option value="">–ó–∞—Ä–µ–∂–¥–∞–º –≤—ä–ø—Ä–æ—Å–∏—Ç–µ...</option>';

        // üìå –¢—ä—Ä—Å–∏–º –∫—É—Ä—Å–∞ –≤ `courses`, –∑–∞ –¥–∞ –≤–∑–µ–º–µ–º –≤—ä–ø—Ä–æ—Å–∏—Ç–µ –æ—Ç –∏–∑–±—Ä–∞–Ω–∞—Ç–∞ –±–∞–Ω–∫–∞
        const coursesCollection = collection(db, "courses");
        const courseQuery = query(coursesCollection, where("disciplineName", "==", selectedDiscipline));
        const courseSnapshot = await getDocs(courseQuery);

        if (courseSnapshot.empty) {
            questionSelect.innerHTML = '<option disabled>‚ùå –ù—è–º–∞ –≤—ä–ø—Ä–æ—Å–∏ –∑–∞ —Ç–∞–∑–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞</option>';
            return;
        }

        let foundQuestions = 0;
        questionSelect.innerHTML = '<option value="">--–ò–∑–±–µ—Ä–∏ –≤—ä–ø—Ä–æ—Å--</option>';

        // üîé –û–±—Ö–æ–∂–¥–∞–º–µ –∫—É—Ä—Å–æ–≤–µ—Ç–µ –∏ –Ω–∞–º–∏—Ä–∞–º–µ –≤—ä–ø—Ä–æ—Å–∏—Ç–µ –æ—Ç –∏–∑–±—Ä–∞–Ω–∞—Ç–∞ –±–∞–Ω–∫–∞
        courseSnapshot.forEach((doc) => {
            const courseData = doc.data();
            if (courseData.questionBanks && Array.isArray(courseData.questionBanks)) {
                const selectedQuestionBank = courseData.questionBanks.find(bank => bank.name === selectedBank);

                if (selectedQuestionBank && selectedQuestionBank.questions && Array.isArray(selectedQuestionBank.questions)) {
                    selectedQuestionBank.questions.forEach((question, index) => {
                        console.log(`üü¢ –í—ä–ø—Ä–æ—Å #${index + 1}:`, question);
                        foundQuestions++;
                        const option = document.createElement("option");
                        option.value = JSON.stringify(question);
                        option.textContent = question.question;
                        questionSelect.appendChild(option);
                    });
                }
            }
        });

        if (foundQuestions === 0) {
            questionSelect.innerHTML += '<option disabled>‚ùå –ù—è–º–∞ –≤—ä–ø—Ä–æ—Å–∏ –≤ —Ç–∞–∑–∏ –±–∞–Ω–∫–∞</option>';
        }

    } catch (error) {
        console.error("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –≤—ä–ø—Ä–æ—Å–∏—Ç–µ:", error);
        questionSelect.innerHTML = '<option disabled>‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ</option>';
    }
}

// ‚úÖ –ó–∞—Ä–µ–∂–¥–∞–º–µ –≤—ä–ø—Ä–æ—Å–∏—Ç–µ –ø—Ä–∏ –ø—Ä–æ–º—è–Ω–∞ –Ω–∞ –±–∞–Ω–∫–∞—Ç–∞ —Å –≤—ä–ø—Ä–æ—Å–∏
document.addEventListener("DOMContentLoaded", () => {
    const questionBankSelect = document.getElementById("questionBank");
    if (questionBankSelect) {
        questionBankSelect.addEventListener("change", loadQuestions);
    } else {
        console.error("‚ùå –ì—Ä–µ—à–∫–∞: `questionBank` –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω –≤ DOM!");
    }
});


// –§—É–Ω–∫—Ü–∏—è –∑–∞ –¥–æ–±–∞–≤—è–Ω–µ –Ω–∞ –≤—ä–ø—Ä–æ—Å –∫—ä–º –∞–∫–æ—Ä–¥–µ–æ–Ω–∞ (—Ä—ä—á–Ω–æ –∏ –ª–æ—Ç–∞—Ä–∏–µ–Ω –ø—Ä–∏–Ω—Ü–∏–ø)
function addQuestionToList(selectedOption) {
    if (!selectedOption) {
        console.warn("‚ö†Ô∏è –õ–∏–ø—Å–≤–∞ –≤—ä–ø—Ä–æ—Å –∑–∞ –¥–æ–±–∞–≤—è–Ω–µ.");
        return;
    }

    const questionData = JSON.parse(selectedOption);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ä—Ç –∑–∞ –≤—ä–ø—Ä–æ—Å–∏ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞
    const selectedQuestionsList = document.getElementById("selectedQuestionsList");
    if (!selectedQuestionsList) {
        console.error("‚ùå –ì—Ä–µ—à–∫–∞: –õ–∏–ø—Å–≤–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ä—Ç 'selectedQuestionsList' –≤ DOM.");
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –≤—ä–ø—Ä–æ—Å—ä—Ç –≤–µ—á–µ –µ –¥–æ–±–∞–≤–µ–Ω
    if ([...selectedQuestionsList.children].some(div => div.dataset.id === questionData.id)) {
        alert("‚ö†Ô∏è –¢–æ–∑–∏ –≤—ä–ø—Ä–æ—Å –≤–µ—á–µ –µ –¥–æ–±–∞–≤–µ–Ω!");
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –≤—ä–ø—Ä–æ—Å—ä—Ç –∏–º–∞ –Ω–∞–ª–∏—á–Ω–∏ –æ–ø—Ü–∏–∏
    if (!Array.isArray(questionData.options) || questionData.options.length === 0) {
        console.error(`‚ùå –ì—Ä–µ—à–∫–∞: –í—ä–ø—Ä–æ—Å—ä—Ç "${questionData.question}" –Ω—è–º–∞ –≤–∞–ª–∏–¥–Ω–∏ –æ–ø—Ü–∏–∏.`);
        alert(`‚ö†Ô∏è –í—ä–ø—Ä–æ—Å—ä—Ç "${questionData.question}" –Ω—è–º–∞ –Ω–∞–ª–∏—á–Ω–∏ –æ—Ç–≥–æ–≤–æ—Ä–∏.`);
        return;
    }

    // –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –∞–∫–æ—Ä–¥–µ–æ–Ω –∑–∞ –≤—ä–ø—Ä–æ—Å–∞
    const questionId = `question-${questionData.id}`;
    const accordionItem = document.createElement("div");
    accordionItem.className = "accordion-item";
    accordionItem.dataset.id = questionData.id; // –ó–∞–ø–∞–∑–≤–∞–º–µ ID, –∑–∞ –¥–∞ –∏–∑–±–µ–≥–Ω–µ–º –¥—É–±–ª–∏—Ä–∞–Ω–µ
    accordionItem.innerHTML = `
       <h2 class="accordion-header" id="heading-${questionId}">
            <button class="accordion-button collapsed fw-bold text-dark bg-white border-bottom" 
                type="button" data-bs-toggle="collapse" 
                data-bs-target="#collapse-${questionId}" 
                aria-expanded="false" aria-controls="collapse-${questionId}">
                ${questionData.question}
            </button>
        </h2>
        <div id="collapse-${questionId}" class="accordion-collapse collapse" 
            aria-labelledby="heading-${questionId}" data-bs-parent="#selectedQuestionsList">
            <div class="accordion-body bg-white">
                <ul class="list-group list-group-flush">
                    ${questionData.options.map(option => 
                        `<li class="list-group-item">${option}</li>`).join("")}
                </ul>
     <p class="mt-2 fw-bold"><i class="bi bi-check-circle text-success"></i><span class="fw-bold text-success"> –í–µ—Ä–µ–Ω –æ—Ç–≥–æ–≤–æ—Ä:</span> ${questionData.correctAnswer}</p>
                <button class="btn btn-outline-danger btn-sm remove-question mt-2"><i class="bi bi-trash"></i> –ü—Ä–µ–º–∞—Ö–Ω–∏</button>
            </div>
        </div>
    `;

    // –î–æ–±–∞–≤—è–Ω–µ –Ω–∞ –±—É—Ç–æ–Ω –∑–∞ –ø—Ä–µ–º–∞—Ö–≤–∞–Ω–µ –Ω–∞ –≤—ä–ø—Ä–æ—Å–∞
    accordionItem.querySelector(".remove-question").addEventListener("click", function () {
        accordionItem.remove();
    });

    selectedQuestionsList.appendChild(accordionItem);
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞ –∏–∑–±–æ—Ä –Ω–∞ –≤—ä–ø—Ä–æ—Å–∏ –Ω–∞ —Å–ª—É—á–∞–µ–Ω –ø—Ä–∏–Ω—Ü–∏–ø (–ª–æ—Ç–∞—Ä–∏–µ–Ω –ø—Ä–∏–Ω—Ü–∏–ø)
async function saveTestSettings() {
    const questionCount = document.getElementById("questionCount").value;
    const testDuration = document.getElementById("testDuration").value;
    const passingScore = document.getElementById("passingScore").value;

    const users = Array.from(document.getElementById("allowedUsersList").children).map(li => li.dataset.email);
    const selectedQuestionsList = document.getElementById("selectedQuestionsList");

    if (!selectedQuestionsList) {
        console.error("‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ä—Ç –∑–∞ –∏–∑–±—Ä–∞–Ω–∏ –≤—ä–ø—Ä–æ—Å–∏ –ª–∏–ø—Å–≤–∞!");
        alert("‚ùå –ì—Ä–µ—à–∫–∞: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ä—Ç –∑–∞ –≤—ä–ø—Ä–æ—Å–∏ –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω.");
        return;
    }

    const selectedQuestions = Array.from(selectedQuestionsList.children).map(li => {
        const questionText = li.querySelector(".accordion-button")?.textContent.trim() || "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω –≤—ä–ø—Ä–æ—Å";
        const options = Array.from(li.querySelectorAll(".accordion-body .list-group-item")).map(opt => opt.textContent);
        const correctAnswerElem = li.querySelector(".accordion-body p strong");
        const correctAnswer = correctAnswerElem ? correctAnswerElem.nextSibling.nodeValue.trim() : "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω –æ—Ç–≥–æ–≤–æ—Ä";

        return {
            id: li.dataset.id,
            question: questionText,
            options: options,
            correctAnswer: correctAnswer
        };
    });

    if (!questionCount || !testDuration || !passingScore || users.length === 0 || selectedQuestions.length === 0) {
        alert("‚ö†Ô∏è –ú–æ–ª—è, –ø–æ–ø—ä–ª–Ω–µ—Ç–µ –≤—Å–∏—á–∫–∏ –ø–æ–ª–µ—Ç–∞ –∏ –∏–∑–±–µ—Ä–µ—Ç–µ –≤—ä–ø—Ä–æ—Å–∏ –∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏!");
        return;
    }

    try {
        const testCollection = collection(db, "tests");

        await addDoc(testCollection, {
            questionCount: parseInt(questionCount),
            testDuration: parseInt(testDuration),
            passingScore: parseInt(passingScore),
            usersAllowed: users,
            selectedQuestions: selectedQuestions,
            createdAt: new Date().toISOString()
        });

        alert("‚úÖ –¢–µ—Å—Ç—ä—Ç –µ –∑–∞–ø–∞–∑–µ–Ω —É—Å–ø–µ—à–Ω–æ –≤ –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏!");

        document.getElementById("test-settings-form").reset();
        document.getElementById("allowedUsersList").innerHTML = "";
        document.getElementById("selectedQuestionsList").innerHTML = "";
    } catch (error) {
        console.error("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞–ø–∞–∑–≤–∞–Ω–µ –Ω–∞ —Ç–µ—Å—Ç–∞:", error);
        alert("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞–ø–∞–∑–≤–∞–Ω–µ –Ω–∞ —Ç–µ—Å—Ç–∞. –û–ø–∏—Ç–∞–π—Ç–µ –æ—Ç–Ω–æ–≤–æ!");
    }
}


document.addEventListener("DOMContentLoaded", function () {
    loadUsers();
    loadQuestions();
    addUserButton.addEventListener("click", function () {
        const selectedOption = userSelect.value;
        if (selectedOption) { addUserToList(selectedOption); }
    });
    addQuestionButton.addEventListener("click", function () {
        const selectedOption = questionSelect.options[questionSelect.selectedIndex];
        if (selectedOption.value) {
            addQuestionToList(selectedOption.value);
        }
    });
    document.getElementById("test-settings-form").addEventListener("submit", function (event) {
        event.preventDefault();
        saveTestSettings();
    });
});
let questions = []; // –î–µ—Ñ–∏–Ω–∏—Ä–∞–Ω–µ –Ω–∞ –º–∞—Å–∏–≤–∞ –≥–ª–æ–±–∞–ª–Ω–æ
document.getElementById("randomQuestions").addEventListener("click", async () => {
    const numQuestions = parseInt(document.getElementById("questionCount").value);
    if (isNaN(numQuestions) || numQuestions <= 0) {
        alert("–ú–æ–ª—è, –≤—ä–≤–µ–¥–µ—Ç–µ –≤–∞–ª–∏–¥–µ–Ω –±—Ä–æ–π –≤—ä–ø—Ä–æ—Å–∏!");
        return;
    }

    try {
        const questionsCollection = collection(db, "questions");
        const querySnapshot = await getDocs(questionsCollection);
        let allQuestions = [];

        querySnapshot.forEach((doc) => {
            allQuestions.push({ id: doc.id, ...doc.data() });
        });

        if (allQuestions.length === 0) {
            alert("‚ùå –ù—è–º–∞ –Ω–∞–ª–∏—á–Ω–∏ –≤—ä–ø—Ä–æ—Å–∏ –≤ –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏!");
            return;
        }

        // –†–∞–∑–±—ä—Ä–∫–≤–∞–Ω–µ –Ω–∞ –≤—ä–ø—Ä–æ—Å–∏—Ç–µ –∏ –∏–∑–±–æ—Ä –Ω–∞ numQuestions –≤—ä–ø—Ä–æ—Å–∞
        let selectedQuestions = allQuestions.sort(() => Math.random() - 0.5).slice(0, numQuestions);

        if (selectedQuestions.length < numQuestions) {
            alert(`‚ö†Ô∏è –ù—è–º–∞ –¥–æ—Å—Ç–∞—Ç—ä—á–Ω–æ –≤—ä–ø—Ä–æ—Å–∏! –ò–∑–±—Ä–∞–Ω–∏ —Å–∞ —Å–∞–º–æ ${selectedQuestions.length}.`);
        }

        selectedQuestions.forEach(q => addQuestionToAccordion(q)); // –î–æ–±–∞–≤—è–º–µ –≥–∏ –∫—ä–º —Å—ä—â–µ—Å—Ç–≤—É–≤–∞—â–∏—è –∞–∫–æ—Ä–¥–µ–æ–Ω

    } catch (error) {
        console.error("üî¥ –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –≤—ä–ø—Ä–æ—Å–∏—Ç–µ:", error);
        alert("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –≤—ä–ø—Ä–æ—Å–∏—Ç–µ –æ—Ç –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏!");
    }
});


// –§—É–Ω–∫—Ü–∏—è –∑–∞ –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å –∏–∑–±—Ä–∞–Ω–∏—Ç–µ –≤—ä–ø—Ä–æ—Å–∏ –∫–∞—Ç–æ –∞–∫–æ—Ä–¥–µ–æ–Ω
function addQuestionToAccordion(questionData) {
    const selectedQuestionsList = document.getElementById("selectedQuestionsList");
    if (!selectedQuestionsList) {
        console.error("‚ùå –ì—Ä–µ—à–∫–∞: –õ–∏–ø—Å–≤–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ä—Ç 'selectedQuestionsList' –≤ DOM.");
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –≤—ä–ø—Ä–æ—Å—ä—Ç –≤–µ—á–µ –µ –¥–æ–±–∞–≤–µ–Ω
    if ([...selectedQuestionsList.children].some(div => div.dataset.id === questionData.id)) {
        console.warn(`‚ö†Ô∏è –í—ä–ø—Ä–æ—Å—ä—Ç "${questionData.question}" –≤–µ—á–µ –µ –¥–æ–±–∞–≤–µ–Ω!`);
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –Ω–∞–ª–∏—á–Ω–∏ –æ–ø—Ü–∏–∏
    if (!Array.isArray(questionData.options) || questionData.options.length === 0) {
        console.error(`‚ùå –ì—Ä–µ—à–∫–∞: –í—ä–ø—Ä–æ—Å—ä—Ç "${questionData.question}" –Ω—è–º–∞ –≤–∞–ª–∏–¥–Ω–∏ –æ–ø—Ü–∏–∏.`);
        alert(`‚ö†Ô∏è –í—ä–ø—Ä–æ—Å—ä—Ç "${questionData.question}" –Ω—è–º–∞ –Ω–∞–ª–∏—á–Ω–∏ –æ—Ç–≥–æ–≤–æ—Ä–∏.`);
        return;
    }

    // –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ —É–Ω–∏–∫–∞–ª–µ–Ω ID –∑–∞ –≤—ä–ø—Ä–æ—Å–∞
    const questionId = `question-${questionData.id}`;

    // –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –∞–∫–æ—Ä–¥–µ–æ–Ω –µ–ª–µ–º–µ–Ω—Ç —Å—ä—Å —Å—Ç–∏–ª–æ–≤–µ
    const accordionItem = document.createElement("div");
    accordionItem.className = "accordion-item border rounded mb-2";
    accordionItem.dataset.id = questionData.id;
    accordionItem.innerHTML = `
        <h2 class="accordion-header" id="heading-${questionId}">
            <button class="accordion-button collapsed fw-bold text-dark bg-white border-bottom" 
                type="button" data-bs-toggle="collapse" 
                data-bs-target="#collapse-${questionId}" 
                aria-expanded="false" aria-controls="collapse-${questionId}">
                ${questionData.question}
            </button>
        </h2>
        <div id="collapse-${questionId}" class="accordion-collapse collapse" 
            aria-labelledby="heading-${questionId}" data-bs-parent="#selectedQuestionsList">
            <div class="accordion-body bg-white">
                <ul class="list-group list-group-flush">
                    ${questionData.options.map(option => 
                        `<li class="list-group-item">${option}</li>`).join("")}
                </ul>
                <p class="mt-2 fw-bold"><i class="bi bi-check-circle text-success"></i><span class="fw-bold text-success"> –í–µ—Ä–µ–Ω –æ—Ç–≥–æ–≤–æ—Ä:</span> ${questionData.correctAnswer}</p>
                <button class="btn btn-outline-danger btn-sm remove-question mt-2"><i class="bi bi-trash"></i> –ü—Ä–µ–º–∞—Ö–Ω–∏</button>
            </div>
        </div>
    `;

    // –î–æ–±–∞–≤—è–Ω–µ –Ω–∞ –±—É—Ç–æ–Ω –∑–∞ –ø—Ä–µ–º–∞—Ö–≤–∞–Ω–µ
    accordionItem.querySelector(".remove-question").addEventListener("click", function () {
        accordionItem.remove();
    });

    selectedQuestionsList.appendChild(accordionItem);
}

async function loadDisciplines() {
    const disciplineSelect = document.getElementById("course"); // –ü–∞–¥–∞—â–æ –º–µ–Ω—é —Å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∏—Ç–µ

    if (!disciplineSelect) {
        console.error("‚ùå –ì—Ä–µ—à–∫–∞: –ù–µ –µ –Ω–∞–º–µ—Ä–µ–Ω –µ–ª–µ–º–µ–Ω—Ç —Å ID 'course' –≤ DOM!");
        return;
    }

    disciplineSelect.innerHTML = '<option value="">–ó–∞—Ä–µ–∂–¥–∞–º –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∏—Ç–µ...</option>';

    try {
        const coursesCollection = collection(db, "courses");
        const querySnapshot = await getDocs(coursesCollection);

        disciplineSelect.innerHTML = '<option value="">--–ò–∑–±–µ—Ä–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞--</option>';
        let foundDisciplines = 0;

        querySnapshot.forEach((doc) => {
            const courseData = doc.data();

            // ‚úÖ –í–∞–∂–Ω–æ! –°–µ–≥–∞ –∑–∞–ø–∏—Å–≤–∞–º–µ **disciplineName**, –∞ –Ω–µ document ID
            const option = document.createElement("option");
            option.value = courseData.disciplineName; // üîπ –ó–∞–ø–∞–∑–≤–∞–º–µ –∏–º–µ—Ç–æ –Ω–∞ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞—Ç–∞
            option.textContent = `${courseData.disciplineName} (–ö—É—Ä—Å ${courseData.course})`;
            disciplineSelect.appendChild(option);

            foundDisciplines++;
        });

        console.log(`‚úÖ –ó–∞—Ä–µ–¥–µ–Ω–∏ —Å–∞ ${foundDisciplines} –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∏.`);
    } catch (error) {
        console.error("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∏—Ç–µ:", error);
        disciplineSelect.innerHTML = '<option disabled>–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ</option>';
    }
}

// ‚úÖ –ó–∞—Ä–µ–∂–¥–∞–º–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∏—Ç–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ
document.addEventListener("DOMContentLoaded", loadDisciplines);
