import { initializeApp } from "https://www.gstatic.com/firebasejs/9.16.0/firebase-app.js";
import { getFirestore, collection, getDocs, doc, getDoc, addDoc } from "https://www.gstatic.com/firebasejs/9.16.0/firebase-firestore.js";
import { getAuth, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/9.16.0/firebase-auth.js";

const firebaseConfig = {
    apiKey: "AIzaSyCR-nsO0Eibf9Fmba6zp0IeyNTiZ1YTNHQ",
    authDomain: "testcenter-2025.firebaseapp.com",
    projectId: "testcenter-2025",
    storageBucket: "testcenter-2025.firebasestorage.app",
    messagingSenderId: "446759343746",
    appId: "1:446759343746:web:9025b482329802cc34069b",
    measurementId: "G-0K3X6WSL09"
};
   // üî• –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ Firebase Authentication
   const app = initializeApp(firebaseConfig);
   const auth = getAuth();
   const db = getFirestore(app);
   // üîπ –í–∑–∏–º–∞–º–µ —Ç–µ–∫—É—â–æ—Ç–æ –∑–∞–≥–ª–∞–≤–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ç–∞
   const pageTitle = document.title;

   // ‚úÖ –ü—Ä–æ—Å–ª–µ–¥—è–≤–∞–Ω–µ –Ω–∞ –ª–æ–≥–Ω–∞—Ç–∏—è –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª
   onAuthStateChanged(auth, (user) => {
       if (user) {
           const userName = user.displayName || user.email; // –ê–∫–æ –Ω—è–º–∞ –∏–º–µ, –∏–∑–ø–æ–ª–∑–≤–∞–º–µ email
           document.title = `${pageTitle} | ${userName}`; // –ü—Ä–æ–º–µ–Ω—è–º–µ title
       } else {
           document.title = `${pageTitle} | –ì–æ—Å—Ç`; // –ê–∫–æ –Ω—è–º–∞ –ª–æ–≥–Ω–∞—Ç –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª
       }
   });
// üî• –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ Firebase


// üìå HTML –µ–ª–µ–º–µ–Ω—Ç–∏
const selectedDisciplineName = document.getElementById("course").selectedOptions[0].textContent;
const disciplineSelect = document.getElementById("course");
const questionBankSelect = document.getElementById("questionBank");
const userTableBody = document.getElementById("userTableBody");
const questionTableBody = document.getElementById("questionTableBody");
const saveButton = document.getElementById("saveTest");
const alertBox = document.getElementById("alertBox");

// üìå –ü–æ–ª–µ—Ç–∞ –∑–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞ —Ç–µ—Å—Ç–∞
const courseSelect = document.getElementById("course");
const testTypeSelect = document.getElementById("testType");
const questionCountInput = document.getElementById("questionCount");
const testDurationInput = document.getElementById("testDuration");
const passingScoreInput = document.getElementById("passingScore");

// ‚úÖ –î–∏–Ω–∞–º–∏—á–Ω–∏ —Å–ø–∏—Å—ä—Ü–∏ –∑–∞ –∏–∑–±—Ä–∞–Ω–∏ —Å—Ç—É–¥–µ–Ω—Ç–∏ –∏ –≤—ä–ø—Ä–æ—Å–∏
const selectedStudents = new Map();
const selectedQuestions = new Map();

// ‚úÖ –§—É–Ω–∫—Ü–∏—è –∑–∞ –ø–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ Bootstrap alerts
function showAlert(type, message) {
    const alertDiv = document.createElement("div");

    // –î–æ–±–∞–≤—è–Ω–µ —Å–∞–º–æ –Ω–∞ –≤–∞–ª–∏–¥–µ–Ω –∫–ª–∞—Å –∑–∞ —Ç–∏–ø–∞ –Ω–∞ –∞–ª–µ—Ä—Ç–∞ (–±–µ–∑ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∏ –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª–Ω–∏ —Å–∏–º–≤–æ–ª–∏)
    alertDiv.classList.add("alert", `alert-${type}`, "alert-dismissible", "fade", "show", "position-fixed", "top-0", "start-50", "translate-middle-x", "mt-3", "shadow");
    
    alertDiv.setAttribute("role", "alert");
    alertDiv.style.zIndex = "1050"; 

    // –°—ä–æ–±—â–µ–Ω–∏–µ—Ç–æ —Å–µ –¥–æ–±–∞–≤—è –≤ HTML —Å—ä–¥—ä—Ä–∂–∞–Ω–∏–µ—Ç–æ, –∞ –Ω–µ –∫–∞—Ç–æ CSS –∫–ª–∞—Å
    alertDiv.innerHTML = `
        <strong>${type === "danger" ? "–ì—Ä–µ—à–∫–∞!" : "–£—Å–ø–µ—Ö!"}</strong> ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    `;

    document.body.appendChild(alertDiv);

    setTimeout(() => {
        alertDiv.classList.remove("show");
        alertDiv.classList.add("fade");
        setTimeout(() => alertDiv.remove(), 500); // –ò–∑—Ç—Ä–∏–≤–∞–Ω–µ —Å–ª–µ–¥ fade out
    }, 5000);
}

// ‚úÖ –§—É–Ω–∫—Ü–∏—è –∑–∞ –∏–∑—á–∏—Å—Ç–≤–∞–Ω–µ –Ω–∞ —Ñ–æ—Ä–º—É–ª—è—Ä–∞ —Å–ª–µ–¥ —É—Å–ø–µ—à–µ–Ω –∑–∞–ø–∏—Å
function clearForm() {
    disciplineSelect.value = "";
    questionBankSelect.value = "";
    testTypeSelect.value = "";
    questionCountInput.value = "";
    testDurationInput.value = "";
    passingScoreInput.value = "";
    selectedStudents.clear();
    selectedQuestions.clear();
    userTableBody.innerHTML = ""; // –ò–∑—á–∏—Å—Ç–≤–∞–º–µ —Ç–∞–±–ª–∏—Ü–∞—Ç–∞ —Å—ä—Å —Å—Ç—É–¥–µ–Ω—Ç–∏
    questionTableBody.innerHTML = ""; // –ò–∑—á–∏—Å—Ç–≤–∞–º–µ —Ç–∞–±–ª–∏—Ü–∞—Ç–∞ —Å –≤—ä–ø—Ä–æ—Å–∏
}

// ‚úÖ –ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∏—Ç–µ
async function loadDisciplines() {
    disciplineSelect.innerHTML = '<option value="">-- –ò–∑–±–µ—Ä–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ --</option>';

    try {
        const querySnapshot = await getDocs(collection(db, "courses"));
        for (const doc of querySnapshot.docs) {
            const course = doc.data();

            if (!course.disciplineName) {
                showAlert("warning",`–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∏—Ç–µ: –ù–µ –µ –Ω–∞–º–µ—Ä–µ–Ω–∞ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ —Å ID: ${doc.id}`);
                continue;
            }

            const option = document.createElement("option");
            option.value = doc.id;
            option.textContent = course.disciplineName;
            disciplineSelect.appendChild(option);
        }

        console.log("‚úÖ –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∏—Ç–µ —Å–∞ –¥–æ–±–∞–≤–µ–Ω–∏ —É—Å–ø–µ—à–Ω–æ!");
    } catch (error) {
        showAlert("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∏—Ç–µ!", "alert-danger");
    }
}


// ‚úÖ –ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –±–∞–Ω–∫–∏ —Å –≤—ä–ø—Ä–æ—Å–∏
async function loadQuestionBanks() {
    questionBankSelect.innerHTML = '<option value="">-- –ò–∑–±–µ—Ä–∏ –±–∞–Ω–∫–∞ —Å –≤—ä–ø—Ä–æ—Å–∏ --</option>';
    const selectedDisciplineId = disciplineSelect.value.trim();

    if (!selectedDisciplineId) return;

    try {
        const disciplineDoc = await getDoc(doc(db, "courses", selectedDisciplineId));

        if (disciplineDoc.exists()) {
            const disciplineData = disciplineDoc.data();
            if (disciplineData.questionBanks) {
                disciplineData.questionBanks.forEach((bank) => {
                    let option = document.createElement("option");
                    option.value = bank.name;
                    option.textContent = bank.name;
                    questionBankSelect.appendChild(option);
                });
            }
        }
    } catch (error) {
        showAlert("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –±–∞–Ω–∫–∏—Ç–µ —Å –≤—ä–ø—Ä–æ—Å–∏!", "alert-danger");
    }
}

// ‚úÖ –ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ —Å—Ç—É–¥–µ–Ω—Ç–∏
async function loadStudents() {
    userTableBody.innerHTML = "";
    const selectedDisciplineId = disciplineSelect.value.trim();

    if (!selectedDisciplineId) return;

    try {
        const disciplineDoc = await getDoc(doc(db, "courses", selectedDisciplineId));

        if (disciplineDoc.exists()) {
            const disciplineData = disciplineDoc.data();
            if (disciplineData.students) {
                disciplineData.students.forEach((student) => {
                    addStudentToTable(student);
                });
            }
        }
    } catch (error) {
        showAlert("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ —Å—Ç—É–¥–µ–Ω—Ç–∏—Ç–µ!", "alert-danger");
    }
}

// üîπ –î–æ–±–∞–≤—è–Ω–µ –Ω–∞ —Å—Ç—É–¥–µ–Ω—Ç –≤ —Ç–∞–±–ª–∏—Ü–∞—Ç–∞
function addStudentToTable(student) {
    const selectedDisciplineName = document.getElementById("course").selectedOptions.value;

    const row = document.createElement("tr");
    row.innerHTML = `
<td><img src="${student.profilePic || 'https://placehold.co/50x50'}" class="rounded-circle" width="50"></td><td>${student.firstName}</td>
        <td>${student.middleName || '-'}</td>
        <td>${student.lastName}</td>
        <td>${student.username}</td>
        <td>${student.email}</td>
        <td>${student.disciplineName}</td>
        <td class="text-center">
            <input type="checkbox" class="form-check-input student-checkbox">
        </td>
    `;

    userTableBody.appendChild(row);

    const checkbox = row.querySelector(".student-checkbox");

    checkbox.addEventListener("change", () => {
        if (checkbox.checked) {
            selectedStudents.set(student.email, student);
        } else {
            selectedStudents.delete(student.email);
        }
    });

    userTableBody.appendChild(row);
}

// ‚úÖ –ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –≤—ä–ø—Ä–æ—Å–∏
async function loadQuestions() {
    questionTableBody.innerHTML = "";
    const selectedDisciplineId = disciplineSelect.value.trim();
    const selectedBankName = questionBankSelect.value.trim();

    if (!selectedDisciplineId || !selectedBankName) return;

    try {
        const disciplineDoc = await getDoc(doc(db, "courses", selectedDisciplineId));

        if (disciplineDoc.exists()) {
            const disciplineData = disciplineDoc.data();

            if (disciplineData.questionBanks) {
                const selectedBank = disciplineData.questionBanks.find(bank => bank.name === selectedBankName);

                if (selectedBank && selectedBank.questions) {
                    selectedBank.questions.forEach((question) => {
                        addQuestionToTable(question);
                    });
                }
            }
        }
    } catch (error) {
        showAlert("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –≤—ä–ø—Ä–æ—Å–∏—Ç–µ!", "alert-danger");
    }
}

// üîπ –î–æ–±–∞–≤—è–Ω–µ –Ω–∞ –≤—ä–ø—Ä–æ—Å –≤ —Ç–∞–±–ª–∏—Ü–∞—Ç–∞
function addQuestionToTable(question) {
    const row = document.createElement("tr");

    row.innerHTML = `
        <td>${question.question}</td>
        <td>${question.options[0]}</td>
        <td>${question.options[1]}</td>
        <td>${question.options[2]}</td>
        <td>${question.options[3]}</td>
        <td class="text-success fw-bold">
            <i class="bi bi-check-circle"></i> ${question.correctAnswer}
        </td>
        <td class="text-center">
            <input type="checkbox" class="form-check-input select-question">
        </td>
    `;

    const checkbox = row.querySelector(".select-question");

    checkbox.addEventListener("change", (e) => {
        if (e.target.checked) {
            selectedQuestions.set(question.question, question);
        } else {
            selectedQuestions.delete(question.question);
        }
    });

    questionTableBody.appendChild(row);
}

// ‚úÖ –ó–∞–ø–∞–∑–≤–∞–Ω–µ –Ω–∞ —Ç–µ—Å—Ç–∞ –≤ –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏
async function saveTest(event) {
    event.preventDefault();

    // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –≤—Å–∏—á–∫–∏ –ø–æ–ª–µ—Ç–∞ —Å–∞ –ø–æ–ø—ä–ª–Ω–µ–Ω–∏
    if (!disciplineSelect.value || !questionBankSelect.value || !testTypeSelect.value ||
        !questionCountInput.value || !testDurationInput.value || !passingScoreInput.value ||
        selectedStudents.size === 0 || selectedQuestions.size === 0) {
        showAlert("‚ö†Ô∏è –ü–æ–ø—ä–ª–Ω–µ—Ç–µ –≤—Å–∏—á–∫–∏ –ø–æ–ª–µ—Ç–∞ –∏ –∏–∑–±–µ—Ä–µ—Ç–µ –ø–æ–Ω–µ –µ–¥–∏–Ω —Å—Ç—É–¥–µ–Ω—Ç –∏ –µ–¥–∏–Ω –≤—ä–ø—Ä–æ—Å!", "alert-warning");
        return;
    }
    const selectedDisciplineName = disciplineSelect.selectedOptions[0].textContent;
    const testData = {
        discipline: {
            id: disciplineSelect.value,
            name: selectedDisciplineName
        },
        questionBank: questionBankSelect.value,
        testType: testTypeSelect.value,
        questionCount: parseInt(questionCountInput.value),
        testDuration: parseInt(testDurationInput.value),
        passingScore: parseInt(passingScoreInput.value),
        students: Array.from(selectedStudents.values()),
        questions: Array.from(selectedQuestions.values()),
        createdAt: new Date().toISOString()
    };

    try {
        await addDoc(collection(db, "tests"), testData);
        showAlert("‚úÖ –¢–µ—Å—Ç—ä—Ç –µ –∑–∞–ø–∞–∑–µ–Ω —É—Å–ø–µ—à–Ω–æ!", "alert-success");
        clearForm(); // ‚ùó –ò–∑—á–∏—Å—Ç–≤–∞–º–µ —Ñ–æ—Ä–º—É–ª—è—Ä–∞ —Å–ª–µ–¥ —É—Å–ø–µ—à–µ–Ω –∑–∞–ø–∏—Å
    } catch (error) {
        showAlert("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–≤–∞–Ω–µ –≤ –±–∞–∑–∞—Ç–∞!", "alert-danger");
    }
}
disciplineSelect.addEventListener("change", loadQuestionBanks);
questionBankSelect.addEventListener("change", loadQuestions);
document.addEventListener("DOMContentLoaded", loadDisciplines);
disciplineSelect.addEventListener("change", loadStudents);
saveButton.addEventListener("click", saveTest);